https://docs.google.com/document/d/1VIJlTIaNXlaOKgBn-TGkYLu2S1DfXRVE2LTC9Ui1EF0/mobilebasic
Для работы в качестве мидл бэкэнд разработчика требуются более глубокие знания и опыт по сравнению с младшим разработчиком. Вот ключевые навыки и знания, необходимые для этой позиции:
### 1. Языки программирования
- **Python, Java, C#, Ruby или PHP**: Углубленные знания и опыт работы с одним или несколькими из этих языков программирования.
- **Асинхронное программирование**: Понимание и использование асинхронных возможностей языка (например, asyncio в Python).
### 2. Базы данных
- **SQL**: Опыт работы с реляционными базами данных (PostgreSQL, MySQL), включая оптимизацию запросов и настройку базы данных.
- **NoSQL**: Глубокое понимание и опыт работы с NoSQL базами данных (MongoDB, Redis, Cassandra).
### 3. Веб-фреймворки
- Продвинутый опыт работы с веб-фреймворками для выбранного языка программирования:
  - **Python**: Django, Flask.
  - **Java**: Spring, Spring Boot.
  - **C#**: ASP.NET Core.
  - **Ruby**: Ruby on Rails.
### 4. RESTful API и GraphQL
- Глубокое понимание и опыт проектирования и разработки RESTful API.
- Опыт работы с **GraphQL** для создания более гибких API.
### 5. Системы контроля версий
- **Git**: Продвинутый опыт работы с Git, включая использование расширенных функций, таких как rebase, submodules и CI/CD интеграция.
### 6. Архитектура приложений
- Глубокое понимание архитектуры приложений, включая микросервисную архитектуру, шаблоны проектирования (например, Singleton, Factory, Observer) и принципы SOLID.
- Опыт проектирования и реализации микросервисных архитектур.
### 7. Операционные системы и серверы
- Глубокое знание операционных систем, таких как **Linux**.
- Опыт администрирования веб-серверов (Apache, Nginx) и настройки производительности.
### 8. Тестирование
- Продвинутые навыки в тестировании кода, включая модульное, интеграционное и нагрузочное тестирование.
- Опыт использования фреймворков для тестирования (например, PyTest для Python, JUnit для Java).
### 9. Проблемы безопасности
- Глубокое понимание основных уязвимостей веб-приложений (OWASP Top Ten) и методов их предотвращения.
- Опыт реализации аутентификации и авторизации (OAuth, JWT).
### 10. Обучаемость и коммуникация
- Способность быстро осваивать новые технологии и адаптироваться к изменениям.
- Отличные навыки коммуникации и работа в команде, способность менторить младших разработчиков и эффективно объяснять сложные технические концепции.
### Дополнительные навыки
- **Docker и контейнеризация**: Опыт работы с Docker для создания, развертывания и управления контейнерами.
- **CI/CD**: Опыт настройки и использования систем непрерывной интеграции и развертывания (например, Jenkins, GitLab CI).
- **Облачные сервисы**: Опыт работы с облачными платформами (AWS, Azure, Google Cloud).
### Ресурсы для изучения
- **Книги**:
  - "Designing Data-Intensive Applications" by Martin Kleppmann.
  - "Clean Architecture: A Craftsman's Guide to Software Structure and Design" by Robert C. Martin.
- **Онлайн-курсы**:
  - Coursera, Udemy для углубленного изучения языков программирования и фреймворков.
  - Pluralsight для изучения архитектуры приложений и облачных технологий.
- **Документация и блоги**:
  - Официальная документация фреймворков и инструментов (Django, Spring, Docker).
  - Блоги и форумы, такие как Medium, Stack Overflow, Hacker News.
### Создание портфолио
- **GitHub**: Размещайте свои проекты и примеры кода на GitHub.
- **Блог или сайт**: Ведите блог или сайт, где делитесь своим опытом и знаниями.
Следуя этому плану, вы сможете последовательно развить необходимые навыки и знания для работы мидл бэкэнд разработчиком.



import MySQLdb as mdb
from PyQt6.QtWidgets import QMessageBox

db = mdb.connect(host='localhost', user ='root', password='', database ='Rylon')

class QwSql():
    def userProcess(self, idModel, batchCount):
        cur = db.cursor()
        rows = cur.execute(f"call OrderFabrication('{idModel}','{batchCount}')" )
        data_qw = cur.fetchall()
        print(data_qw[0][0])
        cur.close()
        db.commit()
        return data_qw

from PyQt6 import QtWidgets
from form import Ui_Form

class Main(QtWidgets.QMainWindow, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.zakaz)

        for i in self.namemodel():
            print(i)
            self.comboBox.addItem(str(i[1]))

    def namemodel(self):
        cur = db.cursor()
        rows = cur.execute(f"SELECT id, name FROM model")
        data_qw = cur.fetchall()
        print(data_qw[0][0])
        cur.close()
        db.commit()
        return data_qw

    def zakaz(self):
        try:
            cur = db.cursor()
            qw = QwSql()
            idModel = self.comboBox.currentText()
            batchCount = self.lineEdit.text()
            print(batchCount)
            rows = cur.execute(f"select id from model where name = '{idModel}'")
            data_qw = cur.fetchone()
            cur.close()

            idModel = data_qw[0]
            print(idModel)
            data = qw.userProcess(idModel, batchCount)
            print(data)
            self.label.setText(f"Итог: {data}")

        except Exception as e:
            print(e)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    wind = Main()
    wind.show()
    sys.exit(app.exec())
